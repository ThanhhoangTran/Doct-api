service: doct-api-dev

custom:
  serverless-offline:
    useChildProcesses: true
  baseName: ${env:BASE_NAME, 'doct-api-dev'}
  s3BucketName: ${self:custom.baseName}-s3-bucket
  sqs: ${self:custom.baseName}-message-queue
  sqs-dlq: ${self:custom.baseName}-message-dead-letter-queue

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceInclude:
        - pg
    packager: 'yarn'

  prune:
    automatic: true
    includeLayers: true
    number: 3

package:
  individually: true

useDotenv: true

provider:
  profile: HoangTran
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'ap-southeast-1'}
  stage: ${opt:stage, 'dev'}

  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    APP_ENV: ${opt:stage, 'dev'}
    REGION: ${opt:region, 'ap-southeast-1'}
    MAIN_QUEUE_URL: { Ref: MessageQueue }
    DB_URL: ${env:DB_URL}

  apiGateway:
    shouldStartNameWithService: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - { Fn::Join: ['', [{ Fn::GetAtt: [S3Bucket, Arn] }, '*']] }
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - { Fn::GetAtt: [MessageQueue, Arn] }
        - { Fn::GetAtt: [DeadLetterQueue, Arn] }

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-offline
  - serverless-dotenv-plugin

functions:
  - ${file(./resources/lambdas/clientServer.yml)}
  - ${file(./resources/lambdas/connectionServer.yml)}

resources:
  - ${file(./resources/s3.yml)}
  - ${file(./resources/sqs.yml)}
